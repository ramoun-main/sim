--[[ -- Find word/file across project ]]
--[[ map("n", "<Leader>pf", ]]
--[[   "<CMD>lua require('plugins.telescope').project_files({ default_text = vim.fn.expand('<cword>'), initial_mode = 'normal' })<CR>") ]]
--[[ map("n", "<Leader>pw", "<CMD>lua require('telescope.builtin').grep_string({ initial_mode = 'normal' })<CR>") ]]
--[[]]
--[[ -- Buffers ]]
--[[ map("n", "<S-q>", ":lua require('mini.bufremove').delete(0, false)<CR>", silent) ]]
--[[]]
--[[ -- Don't yank on delete char ]]
--[[ map("n", "x", '"_x', silent) ]]
--[[ map("n", "X", '"_X', silent) ]]
--[[ map("v", "x", '"_x', silent) ]]
--[[ map("v", "X", '"_X', silent) ]]
--[[]]
--[[ -- Don't yank on visual paste ]]
--[[ map("v", "p", '"_dP', silent) ]]
--[[]]
--[[ -- Avoid issues because of remapping <c-a> and <c-x> below ]]
--[[ vim.cmd([[ ]]
--[[   nnoremap <Plug>SpeedDatingFallbackUp <c-a> ]]
--[[   nnoremap <Plug>SpeedDatingFallbackDown <c-x> ]]
--[[ ) ]]
--[[]]
--[[ -- Quickfix ]]
--[[ map("n", "<Space>,", ":cp<CR>", silent) ]]
--[[ map("n", "<Space>.", ":cn<CR>", silent) ]]
--[[]]
--[[ -- Toggle quicklist ]]
--[[ map("n", "<leader>q", "<cmd>lua require('utils').toggle_quicklist()<CR>", silent) ]]
--[[]]
--[[ -- Manually invoke speeddating in case switch.vim didn't work ]]
--[[ map("n", "<C-a>", ":if !switch#Switch() <bar> call speeddating#increment(v:count1) <bar> endif<CR>", silent) ]]
--[[ map("n", "<C-x>", ":if !switch#Switch({'reverse': 1}) <bar> call speeddating#increment(-v:count1) <bar> endif<CR>", ]]
--[[   silent) ]]
--[[]]
--[[ -- Open links under cursor in browser with gx ]]
--[[ if vim.fn.has('macunix') == 1 then ]]
--[[   map("n", "gx", "<cmd>silent execute '!open ' . shellescape('<cWORD>')<CR>", silent) ]]
--[[ else ]]
--[[   map("n", "gx", "<cmd>silent execute '!xdg-open ' . shellescape('<cWORD>')<CR>", silent) ]]
--[[ end ]]
--[[]]
--[[ -- LSP ]]
--[[ -- map("n", "gd", "<cmd>lua vim.lsp.buf.definition()<CR>", silent) -- Replaced with Glance plugin ]]
--[[ -- map("n", "gr", "<cmd>lua vim.lsp.buf.references({ includeDeclaration = false })<CR>", silent) -- Replaced with Glance plugin ]]
--[[ map("n", "<C-Space>", "<cmd>lua vim.lsp.buf.code_action()<CR>", silent) ]]
--[[ map("n", "<leader>ca", "<cmd>lua vim.lsp.buf.code_action()<CR>", silent) ]]
--[[ map("v", "<leader>ca", "<cmd>'<,'>lua vim.lsp.buf.code_action()<CR>", silent) ]]
--[[ map("n", "<leader>cr", "<cmd>lua vim.lsp.buf.rename()<CR>", silent) ]]
--[[ map("n", "<leader>cf", "<cmd>lua vim.lsp.buf.format({ async = true })<CR>", silent) ]]
--[[ map("v", "<leader>cf", function() ]]
--[[   local start_row, _ = table.unpack(vim.api.nvim_buf_get_mark(0, "<")) ]]
--[[   local end_row, _ = table.unpack(vim.api.nvim_buf_get_mark(0, ">")) ]]
--[[]]
--[[ 	vim.lsp.buf.format({ ]]
--[[ 		range = { ]]
--[[ 			["start"] = { start_row, 0 }, ]]
--[[ 			["end"] = { end_row, 0 }, ]]
--[[ 		}, ]]
--[[ 		async = true, ]]
--[[ 	}) ]]
--[[ end, silent) ]]
--[[ map("n", "<leader>cl", "<cmd>lua vim.diagnostic.open_float({ border = 'rounded', max_width = 100 })<CR>", silent) ]]
--[[ map("n", "gl", "<cmd>lua vim.diagnostic.open_float({ border = 'rounded', max_width = 100 })<CR>", silent) ]]
--[[ map("n", "L", "<cmd>lua vim.lsp.buf.signature_help()<CR>", silent) ]]
--[[ map("n", "]g", "<cmd>lua vim.diagnostic.goto_next({ float = { border = 'rounded', max_width = 100 }})<CR>", silent) ]]
--[[ map("n", "[g", "<cmd>lua vim.diagnostic.goto_prev({ float = { border = 'rounded', max_width = 100 }})<CR>", silent) ]]
--[[ map("n", "K", function() ]]
--[[ 	local winid = require("ufo").peekFoldedLinesUnderCursor() ]]
--[[ 	if not winid then ]]
--[[ 		vim.lsp.buf.hover() ]]
--[[ 	end ]]
--[[ end) ]]

--------------------------------------------------------------------------------------------------------
--
--[[ maps.n['<leader>ff'] = { ]]
--[[   function() ]]
--[[     require('telescope.builtin').find_files() ]]
--[[   end, ]]
--[[   desc = 'Find files', ]]
--[[ } ]]
--[[ map('n', '<leader>fp', '', { ]]
--[[   callback = require(string.format('%s.plugins.telescope.utils', editor_name)).project_files, ]]
--[[   desc = 'Find file', ]]
--[[ }) ]]
--[[ map('n', '<leader>fo', function() ]]
--[[   require('telescope.builtin').oldfiles() ]]
--[[ end, { desc = 'Find history' }) ]]
