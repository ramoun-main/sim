--[[ -- LSP ]]
--[[ map("v", "<leader>cf", function() ]]
--[[   local start_row, _ = table.unpack(vim.api.nvim_buf_get_mark(0, "<")) ]]
--[[   local end_row, _ = table.unpack(vim.api.nvim_buf_get_mark(0, ">")) ]]
--[[]]
--[[ 	vim.lsp.buf.format({ ]]
--[[ 		range = { ]]
--[[ 			["start"] = { start_row, 0 }, ]]
--[[ 			["end"] = { end_row, 0 }, ]]
--[[ 		}, ]]
--[[ 		async = true, ]]
--[[ 	}) ]]
--[[ end, silent) ]]
--
--[[ map("n", "<leader>cl", "<cmd>lua vim.diagnostic.open_float({ border = 'rounded', max_width = 100 })<CR>", silent) ]]
--[[ map("n", "gl", "<cmd>lua vim.diagnostic.open_float({ border = 'rounded', max_width = 100 })<CR>", silent) ]]
--[[ map("n", "L", "<cmd>lua vim.lsp.buf.signature_help()<CR>", silent) ]]
--[[ map("n", "K", function() ]]
--[[ 	local winid = require("ufo").peekFoldedLinesUnderCursor() ]]
--[[ 	if not winid then ]]
--[[ 		vim.lsp.buf.hover() ]]
--[[ 	end ]]
--[[ end) ]]

--------------------------------------------------------------------------------------------------------
--
--[[ maps.n['<leader>ff'] = { ]]
--[[   function() ]]
--[[     require('telescope.builtin').find_files() ]]
--[[   end, ]]
--[[   desc = 'Find files', ]]
--[[ } ]]
--[[ map('n', '<leader>fp', '', { ]]
--[[   callback = require(string.format('%s.plugins.telescope.utils', editor_name)).project_files, ]]
--[[   desc = 'Find file', ]]
--[[ }) ]]
--[[ map('n', '<leader>fo', function() ]]
--[[   require('telescope.builtin').oldfiles() ]]
--[[ end, { desc = 'Find history' }) ]]
